datasource db {
    provider = "mongodb"
    url      = env("MONGO_URI")
}

generator client {
    provider = "prisma-client-js"
}

enum VehicleType {
    SUV
    Hatchback
    Crossover
    Convertible
    Sedan
    Sport
    Coupe
    Minivan
    Wagon
    Pickup
    Van
    Truck
}

enum Role {
    ADMIN
    USER
}

type Images {
    url          String
    name         String
    originalName String
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String     @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    phone         String?
    role          Role       @default(USER)
    address       String?
    accounts      Account[]
    sessions      Session[]
    Vehicle       Vehicle[]
    Comments      Comments[]
}

model Vehicle {
    id                  String      @id @default(auto()) @map("_id") @db.ObjectId
    brand               String
    model               String
    year                Int
    color               String
    mileage             Int
    transmission        String
    engine              String
    description         String
    type                VehicleType
    registration_number String
    availability        Boolean
    hourly_rate         Int
    images              Images[]
    views               Int?        @default(0)
    tags                String[]
    userId              String      @db.ObjectId
    user                User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    Comments            Comments[]
}

model Brands {
    id   String @id @default(auto()) @map("_id") @db.ObjectId
    name String
}

model Comments {
    id        String  @id @default(auto()) @map("_id") @db.ObjectId
    comment   String
    vehicleId String  @db.ObjectId
    userId    String  @db.ObjectId
    vehicle   Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
    user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
